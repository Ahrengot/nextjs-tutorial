{"ast":null,"code":"var _jsxFileName = \"/Users/ahrengot/Documents/work/experiments/nextjs/tutorial/pages/movie/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport PageLayout from \"../../components/PageLayout\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst MoviePage = () => {\n  const {\n    0: results,\n    1: setResults\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: query,\n    1: setQuery\n  } = useState(\"\");\n\n  const search = async e => {\n    e.preventDefault();\n\n    if (isLoading || !query) {\n      return;\n    }\n\n    setLoading(true);\n    console.log(\"Search for: \", query);\n    console.time(\"Searching\");\n    const res = await fetch(`https://api.tvmaze.com/search/shows?q=${encodeURIComponent(query)}`);\n    const data = await res.json();\n    console.timeEnd(\"Searching\");\n    console.log(\"Results: \", data);\n    setLoading(false);\n  };\n\n  return __jsx(PageLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Search for movies\"), __jsx(\"form\", {\n    onSubmit: search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(\"fieldset\", {\n    disabled: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"search\",\n    value: query,\n    onChange: e => setQuery(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }))));\n};\n\nexport default MoviePage;","map":{"version":3,"sources":["/Users/ahrengot/Documents/work/experiments/nextjs/tutorial/pages/movie/index.tsx"],"names":["useState","PageLayout","fetch","MoviePage","results","setResults","isLoading","setLoading","query","setQuery","search","e","preventDefault","console","log","time","res","encodeURIComponent","data","json","timeEnd","target","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAoBA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACM,SAAD;AAAA,OAAYC;AAAZ,MAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMU,MAAM,GAAG,MAAOC,CAAP,IAA6B;AAC1CA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAIN,SAAS,IAAI,CAACE,KAAlB,EAAyB;AACvB;AACD;;AAEDD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,KAA5B;AACAK,IAAAA,OAAO,CAACE,IAAR,CAAa,WAAb;AAEA,UAAMC,GAAG,GAAG,MAAMd,KAAK,CAAE,yCAAwCe,kBAAkB,CAACT,KAAD,CAAQ,EAApE,CAAvB;AACA,UAAMU,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAN,IAAAA,OAAO,CAACO,OAAR,CAAgB,WAAhB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBI,IAAzB;AAEAX,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAlBD;;AAoBA,SACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAM,IAAA,QAAQ,EAAEG,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAU,IAAA,QAAQ,EAAEJ,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAEE,KAA5B;AAAmC,IAAA,QAAQ,EAAEG,CAAC,IAAIF,QAAQ,CAACE,CAAC,CAACU,MAAF,CAASC,KAAV,CAA1D;AAA4E,IAAA,QAAQ,MAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAFF,CADF;AAUD,CAnCD;;AAqCA,eAAenB,SAAf","sourcesContent":["import { useState } from \"react\";\nimport PageLayout from \"../../components/PageLayout\";\nimport fetch from \"isomorphic-unfetch\";\n\ntype Movie = {\n  score: number,\n  show: {\n    id: number,\n    url: string,\n    name: string,\n    genres: string[],\n    premiered: string,\n    rating: {\n      average: number,\n    },\n    image: {\n      medium: string,\n    },\n    summary: string\n  }\n}\n\nconst MoviePage = () => {\n  const [results, setResults] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [query, setQuery] = useState(\"\");\n\n  const search = async (e:React.FormEvent) => {\n    e.preventDefault();\n\n    if (isLoading || !query) {\n      return;\n    }\n    \n    setLoading(true);\n    console.log(\"Search for: \", query);\n    console.time(\"Searching\");\n    \n    const res = await fetch(`https://api.tvmaze.com/search/shows?q=${encodeURIComponent(query)}`);\n    const data = await res.json();\n    \n    console.timeEnd(\"Searching\");\n    console.log(\"Results: \", data);\n\n    setLoading(false);\n  }\n\n  return (\n    <PageLayout>\n      <h1>Search for movies</h1>\n      <form onSubmit={search}>\n        <fieldset disabled={isLoading}>\n          <input type=\"search\" value={query} onChange={e => setQuery(e.target.value)} required />\n        </fieldset>\n      </form>\n    </PageLayout>\n  )\n}\n\nexport default MoviePage;"]},"metadata":{},"sourceType":"module"}