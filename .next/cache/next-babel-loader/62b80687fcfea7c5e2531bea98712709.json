{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/ahrengot/Documents/work/experiments/nextjs/tutorial/pages/movie/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport PageLayout from \"../../components/PageLayout\";\nimport fetch from \"isomorphic-unfetch\";\n\nvar MoviePage = function MoviePage() {\n  var _useState = useState([]),\n      results = _useState[0],\n      setResults = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      query = _useState3[0],\n      setQuery = _useState3[1];\n\n  var search = function search(e) {\n    var res, data;\n    return _regeneratorRuntime.async(function search$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            if (!(isLoading || !query)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            setLoading(true);\n            console.log(\"Search for: \", query);\n            console.time(\"Searching\");\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(fetch(\"https://api.tvmaze.com/search/shows?q=\".concat(encodeURIComponent(query))));\n\n          case 8:\n            res = _context.sent;\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 11:\n            data = _context.sent;\n            console.timeEnd(\"Searching\");\n            console.log(\"Results: \", data);\n            setLoading(false);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  return __jsx(PageLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Search for movies\"), __jsx(\"form\", {\n    onSubmit: search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(\"fieldset\", {\n    disabled: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"search\",\n    value: query,\n    onChange: function onChange(e) {\n      return setQuery(e.target.value);\n    },\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }))));\n};\n\nexport default MoviePage;","map":{"version":3,"sources":["/Users/ahrengot/Documents/work/experiments/nextjs/tutorial/pages/movie/index.tsx"],"names":["useState","PageLayout","fetch","MoviePage","results","setResults","isLoading","setLoading","query","setQuery","search","e","preventDefault","console","log","time","encodeURIComponent","res","json","data","timeEnd","target","value"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAoBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA,kBACQH,QAAQ,CAAC,EAAD,CADhB;AAAA,MACfI,OADe;AAAA,MACNC,UADM;;AAAA,mBAEUL,QAAQ,CAAC,KAAD,CAFlB;AAAA,MAEfM,SAFe;AAAA,MAEJC,UAFI;;AAAA,mBAGIP,QAAQ,CAAC,EAAD,CAHZ;AAAA,MAGfQ,KAHe;AAAA,MAGRC,QAHQ;;AAKtB,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACbA,YAAAA,CAAC,CAACC,cAAF;;AADa,kBAGTN,SAAS,IAAI,CAACE,KAHL;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAObD,YAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,KAA5B;AACAK,YAAAA,OAAO,CAACE,IAAR,CAAa,WAAb;AATa;AAAA,6CAWKb,KAAK,iDAA0Cc,kBAAkB,CAACR,KAAD,CAA5D,EAXV;;AAAA;AAWPS,YAAAA,GAXO;AAAA;AAAA,6CAYMA,GAAG,CAACC,IAAJ,EAZN;;AAAA;AAYPC,YAAAA,IAZO;AAcbN,YAAAA,OAAO,CAACO,OAAR,CAAgB,WAAhB;AACAP,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBK,IAAzB;AAEAZ,YAAAA,UAAU,CAAC,KAAD,CAAV;;AAjBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAoBA,SACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAM,IAAA,QAAQ,EAAEG,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAU,IAAA,QAAQ,EAAEJ,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAEE,KAA5B;AAAmC,IAAA,QAAQ,EAAE,kBAAAG,CAAC;AAAA,aAAIF,QAAQ,CAACE,CAAC,CAACU,MAAF,CAASC,KAAV,CAAZ;AAAA,KAA9C;AAA4E,IAAA,QAAQ,MAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAFF,CADF;AAUD,CAnCD;;AAqCA,eAAenB,SAAf","sourcesContent":["import { useState } from \"react\";\nimport PageLayout from \"../../components/PageLayout\";\nimport fetch from \"isomorphic-unfetch\";\n\ntype Movie = {\n  score: number,\n  show: {\n    id: number,\n    url: string,\n    name: string,\n    genres: string[],\n    premiered: string,\n    rating: {\n      average: number,\n    },\n    image: {\n      medium: string,\n    },\n    summary: string\n  }\n}\n\nconst MoviePage = () => {\n  const [results, setResults] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [query, setQuery] = useState(\"\");\n\n  const search = async (e:React.FormEvent) => {\n    e.preventDefault();\n\n    if (isLoading || !query) {\n      return;\n    }\n    \n    setLoading(true);\n    console.log(\"Search for: \", query);\n    console.time(\"Searching\");\n    \n    const res = await fetch(`https://api.tvmaze.com/search/shows?q=${encodeURIComponent(query)}`);\n    const data = await res.json();\n    \n    console.timeEnd(\"Searching\");\n    console.log(\"Results: \", data);\n\n    setLoading(false);\n  }\n\n  return (\n    <PageLayout>\n      <h1>Search for movies</h1>\n      <form onSubmit={search}>\n        <fieldset disabled={isLoading}>\n          <input type=\"search\" value={query} onChange={e => setQuery(e.target.value)} required />\n        </fieldset>\n      </form>\n    </PageLayout>\n  )\n}\n\nexport default MoviePage;"]},"metadata":{},"sourceType":"module"}