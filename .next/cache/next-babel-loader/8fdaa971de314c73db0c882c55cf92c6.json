{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/ahrengot/Documents/work/experiments/nextjs/tutorial/pages/movie/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport Link from \"next/link\";\nimport PageLayout from \"../../components/PageLayout\";\nimport fetch from \"isomorphic-unfetch\";\n\nvar MovieItem = function MovieItem(_ref) {\n  var show = _ref.show;\n  return __jsx(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: show.image.medium,\n    alt: show.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, show.name), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, show.summary));\n};\n\nvar MoviePage = function MoviePage() {\n  var _useState = useState([]),\n      results = _useState[0],\n      setResults = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      query = _useState3[0],\n      setQuery = _useState3[1];\n\n  var search = function search(e) {\n    var res, data;\n    return _regeneratorRuntime.async(function search$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            if (!(isLoading || !query)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            setResults([]);\n            setLoading(true);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(fetch(\"https://api.tvmaze.com/search/shows?q=\".concat(encodeURIComponent(query))));\n\n          case 7:\n            res = _context.sent;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 10:\n            data = _context.sent;\n            setLoading(false);\n            setResults(data);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  return __jsx(PageLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Search for movies\"), __jsx(\"form\", {\n    onSubmit: search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"fieldset\", {\n    disabled: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"search\",\n    className: \"form-control\",\n    value: query,\n    onChange: function onChange(e) {\n      return setQuery(e.target.value);\n    },\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }))), results && __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, results.map(function (movie) {\n    return __jsx(\"li\", {\n      key: movie.show.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/movie/[id]\",\n      as: \"/movie/\".concat(movie.show.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(MovieItem, _extends({}, movie, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })))));\n  })));\n};\n\nexport default MoviePage;","map":{"version":3,"sources":["/Users/ahrengot/Documents/work/experiments/nextjs/tutorial/pages/movie/index.tsx"],"names":["useState","Link","PageLayout","fetch","MovieItem","show","image","medium","name","summary","MoviePage","results","setResults","isLoading","setLoading","query","setQuery","search","e","preventDefault","encodeURIComponent","res","json","data","target","value","map","movie","id"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport Link from \"next/link\";\nimport PageLayout from \"../../components/PageLayout\";\nimport fetch from \"isomorphic-unfetch\";\n\ntype Movie = {\n  score: number,\n  show: {\n    id: number,\n    url: string,\n    name: string,\n    genres: string[],\n    premiered: string,\n    rating: {\n      average: number,\n    },\n    image: {\n      medium: string,\n    },\n    summary: string\n  }\n}\n\nconst MovieItem = ({show}:Movie) => (\n  <article>\n    <img src={show.image.medium} alt={show.name} />\n    <h3>{show.name}</h3>\n    <div>{show.summary}</div>\n  </article>\n)\n\nconst MoviePage = () => {\n  const [results, setResults] = useState<Movie[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [query, setQuery] = useState(\"\");\n\n  const search = async (e:React.FormEvent) => {\n    e.preventDefault();\n\n    if (isLoading || !query) {\n      return;\n    }\n    \n    setResults([]);\n    setLoading(true);\n    \n    const res = await fetch(`https://api.tvmaze.com/search/shows?q=${encodeURIComponent(query)}`);\n    const data = await res.json();\n    \n\n    setLoading(false);\n    setResults(data);\n  }\n\n  return (\n    <PageLayout>\n      <h1>Search for movies</h1>\n      <form onSubmit={search}>\n        <fieldset disabled={isLoading}>\n          <input type=\"search\" className=\"form-control\" value={query} onChange={e => setQuery(e.target.value)} required />\n        </fieldset>\n      </form>\n      {results && (\n        <ul>\n          {results.map(movie => (\n            <li key={movie.show.id}>\n              <Link href=\"/movie/[id]\" as={`/movie/${movie.show.id}`}>\n                <a>\n                  <MovieItem {...movie} />\n                </a>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </PageLayout>\n  )\n}\n\nexport default MoviePage;"]},"metadata":{},"sourceType":"module"}